// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace Chat {
class ControlInfo_C_TO_S;
struct ControlInfo_C_TO_SDefaultTypeInternal;
extern ControlInfo_C_TO_SDefaultTypeInternal _ControlInfo_C_TO_S_default_instance_;
class NotifyStartGame;
struct NotifyStartGameDefaultTypeInternal;
extern NotifyStartGameDefaultTypeInternal _NotifyStartGame_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class SetNickName_C_TO_S;
struct SetNickName_C_TO_SDefaultTypeInternal;
extern SetNickName_C_TO_SDefaultTypeInternal _SetNickName_C_TO_S_default_instance_;
class UpdateInfo_S_TO_C;
struct UpdateInfo_S_TO_CDefaultTypeInternal;
extern UpdateInfo_S_TO_CDefaultTypeInternal _UpdateInfo_S_TO_C_default_instance_;
class UpdateRoomInfo_S_TO_C;
struct UpdateRoomInfo_S_TO_CDefaultTypeInternal;
extern UpdateRoomInfo_S_TO_CDefaultTypeInternal _UpdateRoomInfo_S_TO_C_default_instance_;
class Welcome_S_TO_C;
struct Welcome_S_TO_CDefaultTypeInternal;
extern Welcome_S_TO_CDefaultTypeInternal _Welcome_S_TO_C_default_instance_;
}  // namespace Chat
PROTOBUF_NAMESPACE_OPEN
template<> ::Chat::ControlInfo_C_TO_S* Arena::CreateMaybeMessage<::Chat::ControlInfo_C_TO_S>(Arena*);
template<> ::Chat::NotifyStartGame* Arena::CreateMaybeMessage<::Chat::NotifyStartGame>(Arena*);
template<> ::Chat::PlayerInfo* Arena::CreateMaybeMessage<::Chat::PlayerInfo>(Arena*);
template<> ::Chat::SetNickName_C_TO_S* Arena::CreateMaybeMessage<::Chat::SetNickName_C_TO_S>(Arena*);
template<> ::Chat::UpdateInfo_S_TO_C* Arena::CreateMaybeMessage<::Chat::UpdateInfo_S_TO_C>(Arena*);
template<> ::Chat::UpdateRoomInfo_S_TO_C* Arena::CreateMaybeMessage<::Chat::UpdateRoomInfo_S_TO_C>(Arena*);
template<> ::Chat::Welcome_S_TO_C* Arena::CreateMaybeMessage<::Chat::Welcome_S_TO_C>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Chat {

enum TYPE : int {
  controlInfo_C_TO_S = 0,
  updateInfo_S_TO_C = 1,
  setNickName_C_TO_S = 2,
  updateRoomInfo_S_TO_C = 3,
  welcome_S_TO_C = 4,
  notifyStartGame_S_TO_C = 5,
  TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TYPE_IsValid(int value);
constexpr TYPE TYPE_MIN = controlInfo_C_TO_S;
constexpr TYPE TYPE_MAX = notifyStartGame_S_TO_C;
constexpr int TYPE_ARRAYSIZE = TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TYPE_descriptor();
template<typename T>
inline const std::string& TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TYPE_descriptor(), enum_t_value);
}
inline bool TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TYPE>(
    TYPE_descriptor(), name, value);
}
// ===================================================================

class ControlInfo_C_TO_S final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.ControlInfo_C_TO_S) */ {
 public:
  inline ControlInfo_C_TO_S() : ControlInfo_C_TO_S(nullptr) {}
  ~ControlInfo_C_TO_S() override;
  explicit constexpr ControlInfo_C_TO_S(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlInfo_C_TO_S(const ControlInfo_C_TO_S& from);
  ControlInfo_C_TO_S(ControlInfo_C_TO_S&& from) noexcept
    : ControlInfo_C_TO_S() {
    *this = ::std::move(from);
  }

  inline ControlInfo_C_TO_S& operator=(const ControlInfo_C_TO_S& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlInfo_C_TO_S& operator=(ControlInfo_C_TO_S&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlInfo_C_TO_S& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlInfo_C_TO_S* internal_default_instance() {
    return reinterpret_cast<const ControlInfo_C_TO_S*>(
               &_ControlInfo_C_TO_S_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlInfo_C_TO_S& a, ControlInfo_C_TO_S& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlInfo_C_TO_S* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlInfo_C_TO_S* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlInfo_C_TO_S* New() const final {
    return new ControlInfo_C_TO_S();
  }

  ControlInfo_C_TO_S* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlInfo_C_TO_S>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlInfo_C_TO_S& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlInfo_C_TO_S& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlInfo_C_TO_S* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.ControlInfo_C_TO_S";
  }
  protected:
  explicit ControlInfo_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kSFieldNumber = 2,
    kAFieldNumber = 3,
    kDFieldNumber = 4,
    kPlayerIDFieldNumber = 5,
  };
  // bool W = 1;
  void clear_w();
  bool w() const;
  void set_w(bool value);
  private:
  bool _internal_w() const;
  void _internal_set_w(bool value);
  public:

  // bool S = 2;
  void clear_s();
  bool s() const;
  void set_s(bool value);
  private:
  bool _internal_s() const;
  void _internal_set_s(bool value);
  public:

  // bool A = 3;
  void clear_a();
  bool a() const;
  void set_a(bool value);
  private:
  bool _internal_a() const;
  void _internal_set_a(bool value);
  public:

  // bool D = 4;
  void clear_d();
  bool d() const;
  void set_d(bool value);
  private:
  bool _internal_d() const;
  void _internal_set_d(bool value);
  public:

  // int32 playerID = 5;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.ControlInfo_C_TO_S)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool w_;
  bool s_;
  bool a_;
  bool d_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class UpdateInfo_S_TO_C final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.UpdateInfo_S_TO_C) */ {
 public:
  inline UpdateInfo_S_TO_C() : UpdateInfo_S_TO_C(nullptr) {}
  ~UpdateInfo_S_TO_C() override;
  explicit constexpr UpdateInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateInfo_S_TO_C(const UpdateInfo_S_TO_C& from);
  UpdateInfo_S_TO_C(UpdateInfo_S_TO_C&& from) noexcept
    : UpdateInfo_S_TO_C() {
    *this = ::std::move(from);
  }

  inline UpdateInfo_S_TO_C& operator=(const UpdateInfo_S_TO_C& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateInfo_S_TO_C& operator=(UpdateInfo_S_TO_C&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateInfo_S_TO_C& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateInfo_S_TO_C* internal_default_instance() {
    return reinterpret_cast<const UpdateInfo_S_TO_C*>(
               &_UpdateInfo_S_TO_C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateInfo_S_TO_C& a, UpdateInfo_S_TO_C& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateInfo_S_TO_C* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateInfo_S_TO_C* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateInfo_S_TO_C* New() const final {
    return new UpdateInfo_S_TO_C();
  }

  UpdateInfo_S_TO_C* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateInfo_S_TO_C>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateInfo_S_TO_C& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateInfo_S_TO_C& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInfo_S_TO_C* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.UpdateInfo_S_TO_C";
  }
  protected:
  explicit UpdateInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlInfosFieldNumber = 2,
    kFrameIDFieldNumber = 1,
  };
  // repeated .Chat.ControlInfo_C_TO_S controlInfos = 2;
  int controlinfos_size() const;
  private:
  int _internal_controlinfos_size() const;
  public:
  void clear_controlinfos();
  ::Chat::ControlInfo_C_TO_S* mutable_controlinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ControlInfo_C_TO_S >*
      mutable_controlinfos();
  private:
  const ::Chat::ControlInfo_C_TO_S& _internal_controlinfos(int index) const;
  ::Chat::ControlInfo_C_TO_S* _internal_add_controlinfos();
  public:
  const ::Chat::ControlInfo_C_TO_S& controlinfos(int index) const;
  ::Chat::ControlInfo_C_TO_S* add_controlinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ControlInfo_C_TO_S >&
      controlinfos() const;

  // int32 frameID = 1;
  void clear_frameid();
  ::PROTOBUF_NAMESPACE_ID::int32 frameid() const;
  void set_frameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frameid() const;
  void _internal_set_frameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.UpdateInfo_S_TO_C)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ControlInfo_C_TO_S > controlinfos_;
  ::PROTOBUF_NAMESPACE_ID::int32 frameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SetNickName_C_TO_S final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.SetNickName_C_TO_S) */ {
 public:
  inline SetNickName_C_TO_S() : SetNickName_C_TO_S(nullptr) {}
  ~SetNickName_C_TO_S() override;
  explicit constexpr SetNickName_C_TO_S(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetNickName_C_TO_S(const SetNickName_C_TO_S& from);
  SetNickName_C_TO_S(SetNickName_C_TO_S&& from) noexcept
    : SetNickName_C_TO_S() {
    *this = ::std::move(from);
  }

  inline SetNickName_C_TO_S& operator=(const SetNickName_C_TO_S& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNickName_C_TO_S& operator=(SetNickName_C_TO_S&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetNickName_C_TO_S& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetNickName_C_TO_S* internal_default_instance() {
    return reinterpret_cast<const SetNickName_C_TO_S*>(
               &_SetNickName_C_TO_S_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetNickName_C_TO_S& a, SetNickName_C_TO_S& b) {
    a.Swap(&b);
  }
  inline void Swap(SetNickName_C_TO_S* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetNickName_C_TO_S* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetNickName_C_TO_S* New() const final {
    return new SetNickName_C_TO_S();
  }

  SetNickName_C_TO_S* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetNickName_C_TO_S>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetNickName_C_TO_S& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetNickName_C_TO_S& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNickName_C_TO_S* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.SetNickName_C_TO_S";
  }
  protected:
  explicit SetNickName_C_TO_S(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:Chat.SetNickName_C_TO_S)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Welcome_S_TO_C final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.Welcome_S_TO_C) */ {
 public:
  inline Welcome_S_TO_C() : Welcome_S_TO_C(nullptr) {}
  ~Welcome_S_TO_C() override;
  explicit constexpr Welcome_S_TO_C(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Welcome_S_TO_C(const Welcome_S_TO_C& from);
  Welcome_S_TO_C(Welcome_S_TO_C&& from) noexcept
    : Welcome_S_TO_C() {
    *this = ::std::move(from);
  }

  inline Welcome_S_TO_C& operator=(const Welcome_S_TO_C& from) {
    CopyFrom(from);
    return *this;
  }
  inline Welcome_S_TO_C& operator=(Welcome_S_TO_C&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Welcome_S_TO_C& default_instance() {
    return *internal_default_instance();
  }
  static inline const Welcome_S_TO_C* internal_default_instance() {
    return reinterpret_cast<const Welcome_S_TO_C*>(
               &_Welcome_S_TO_C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Welcome_S_TO_C& a, Welcome_S_TO_C& b) {
    a.Swap(&b);
  }
  inline void Swap(Welcome_S_TO_C* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Welcome_S_TO_C* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Welcome_S_TO_C* New() const final {
    return new Welcome_S_TO_C();
  }

  Welcome_S_TO_C* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Welcome_S_TO_C>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Welcome_S_TO_C& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Welcome_S_TO_C& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Welcome_S_TO_C* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.Welcome_S_TO_C";
  }
  protected:
  explicit Welcome_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUdpAddressFieldNumber = 3,
    kPlayerIDFieldNumber = 1,
    kKcpConvFieldNumber = 2,
    kUdpPortFieldNumber = 4,
  };
  // string udp_address = 3;
  void clear_udp_address();
  const std::string& udp_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_udp_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_udp_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_udp_address();
  void set_allocated_udp_address(std::string* udp_address);
  private:
  const std::string& _internal_udp_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_udp_address(const std::string& value);
  std::string* _internal_mutable_udp_address();
  public:

  // int32 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 kcp_conv = 2;
  void clear_kcp_conv();
  ::PROTOBUF_NAMESPACE_ID::int32 kcp_conv() const;
  void set_kcp_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kcp_conv() const;
  void _internal_set_kcp_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 udp_port = 4;
  void clear_udp_port();
  ::PROTOBUF_NAMESPACE_ID::int32 udp_port() const;
  void set_udp_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udp_port() const;
  void _internal_set_udp_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.Welcome_S_TO_C)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udp_address_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 kcp_conv_;
  ::PROTOBUF_NAMESPACE_ID::int32 udp_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class UpdateRoomInfo_S_TO_C final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.UpdateRoomInfo_S_TO_C) */ {
 public:
  inline UpdateRoomInfo_S_TO_C() : UpdateRoomInfo_S_TO_C(nullptr) {}
  ~UpdateRoomInfo_S_TO_C() override;
  explicit constexpr UpdateRoomInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRoomInfo_S_TO_C(const UpdateRoomInfo_S_TO_C& from);
  UpdateRoomInfo_S_TO_C(UpdateRoomInfo_S_TO_C&& from) noexcept
    : UpdateRoomInfo_S_TO_C() {
    *this = ::std::move(from);
  }

  inline UpdateRoomInfo_S_TO_C& operator=(const UpdateRoomInfo_S_TO_C& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoomInfo_S_TO_C& operator=(UpdateRoomInfo_S_TO_C&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRoomInfo_S_TO_C& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRoomInfo_S_TO_C* internal_default_instance() {
    return reinterpret_cast<const UpdateRoomInfo_S_TO_C*>(
               &_UpdateRoomInfo_S_TO_C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateRoomInfo_S_TO_C& a, UpdateRoomInfo_S_TO_C& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoomInfo_S_TO_C* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoomInfo_S_TO_C* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRoomInfo_S_TO_C* New() const final {
    return new UpdateRoomInfo_S_TO_C();
  }

  UpdateRoomInfo_S_TO_C* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRoomInfo_S_TO_C>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRoomInfo_S_TO_C& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRoomInfo_S_TO_C& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoomInfo_S_TO_C* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.UpdateRoomInfo_S_TO_C";
  }
  protected:
  explicit UpdateRoomInfo_S_TO_C(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCountFieldNumber = 1,
  };
  // int32 playerCount = 1;
  void clear_playercount();
  ::PROTOBUF_NAMESPACE_ID::int32 playercount() const;
  void set_playercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playercount() const;
  void _internal_set_playercount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.UpdateRoomInfo_S_TO_C)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit constexpr PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return new PlayerInfo();
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kPlayerIDFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 playerID = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class NotifyStartGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.NotifyStartGame) */ {
 public:
  inline NotifyStartGame() : NotifyStartGame(nullptr) {}
  ~NotifyStartGame() override;
  explicit constexpr NotifyStartGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyStartGame(const NotifyStartGame& from);
  NotifyStartGame(NotifyStartGame&& from) noexcept
    : NotifyStartGame() {
    *this = ::std::move(from);
  }

  inline NotifyStartGame& operator=(const NotifyStartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyStartGame& operator=(NotifyStartGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyStartGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyStartGame* internal_default_instance() {
    return reinterpret_cast<const NotifyStartGame*>(
               &_NotifyStartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NotifyStartGame& a, NotifyStartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyStartGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyStartGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyStartGame* New() const final {
    return new NotifyStartGame();
  }

  NotifyStartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyStartGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyStartGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NotifyStartGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyStartGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.NotifyStartGame";
  }
  protected:
  explicit NotifyStartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfosFieldNumber = 1,
  };
  // repeated .Chat.PlayerInfo playerInfos = 1;
  int playerinfos_size() const;
  private:
  int _internal_playerinfos_size() const;
  public:
  void clear_playerinfos();
  ::Chat::PlayerInfo* mutable_playerinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::PlayerInfo >*
      mutable_playerinfos();
  private:
  const ::Chat::PlayerInfo& _internal_playerinfos(int index) const;
  ::Chat::PlayerInfo* _internal_add_playerinfos();
  public:
  const ::Chat::PlayerInfo& playerinfos(int index) const;
  ::Chat::PlayerInfo* add_playerinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::PlayerInfo >&
      playerinfos() const;

  // @@protoc_insertion_point(class_scope:Chat.NotifyStartGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::PlayerInfo > playerinfos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlInfo_C_TO_S

// bool W = 1;
inline void ControlInfo_C_TO_S::clear_w() {
  w_ = false;
}
inline bool ControlInfo_C_TO_S::_internal_w() const {
  return w_;
}
inline bool ControlInfo_C_TO_S::w() const {
  // @@protoc_insertion_point(field_get:Chat.ControlInfo_C_TO_S.W)
  return _internal_w();
}
inline void ControlInfo_C_TO_S::_internal_set_w(bool value) {
  
  w_ = value;
}
inline void ControlInfo_C_TO_S::set_w(bool value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Chat.ControlInfo_C_TO_S.W)
}

// bool S = 2;
inline void ControlInfo_C_TO_S::clear_s() {
  s_ = false;
}
inline bool ControlInfo_C_TO_S::_internal_s() const {
  return s_;
}
inline bool ControlInfo_C_TO_S::s() const {
  // @@protoc_insertion_point(field_get:Chat.ControlInfo_C_TO_S.S)
  return _internal_s();
}
inline void ControlInfo_C_TO_S::_internal_set_s(bool value) {
  
  s_ = value;
}
inline void ControlInfo_C_TO_S::set_s(bool value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:Chat.ControlInfo_C_TO_S.S)
}

// bool A = 3;
inline void ControlInfo_C_TO_S::clear_a() {
  a_ = false;
}
inline bool ControlInfo_C_TO_S::_internal_a() const {
  return a_;
}
inline bool ControlInfo_C_TO_S::a() const {
  // @@protoc_insertion_point(field_get:Chat.ControlInfo_C_TO_S.A)
  return _internal_a();
}
inline void ControlInfo_C_TO_S::_internal_set_a(bool value) {
  
  a_ = value;
}
inline void ControlInfo_C_TO_S::set_a(bool value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Chat.ControlInfo_C_TO_S.A)
}

// bool D = 4;
inline void ControlInfo_C_TO_S::clear_d() {
  d_ = false;
}
inline bool ControlInfo_C_TO_S::_internal_d() const {
  return d_;
}
inline bool ControlInfo_C_TO_S::d() const {
  // @@protoc_insertion_point(field_get:Chat.ControlInfo_C_TO_S.D)
  return _internal_d();
}
inline void ControlInfo_C_TO_S::_internal_set_d(bool value) {
  
  d_ = value;
}
inline void ControlInfo_C_TO_S::set_d(bool value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:Chat.ControlInfo_C_TO_S.D)
}

// int32 playerID = 5;
inline void ControlInfo_C_TO_S::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlInfo_C_TO_S::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlInfo_C_TO_S::playerid() const {
  // @@protoc_insertion_point(field_get:Chat.ControlInfo_C_TO_S.playerID)
  return _internal_playerid();
}
inline void ControlInfo_C_TO_S::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void ControlInfo_C_TO_S::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Chat.ControlInfo_C_TO_S.playerID)
}

// -------------------------------------------------------------------

// UpdateInfo_S_TO_C

// int32 frameID = 1;
inline void UpdateInfo_S_TO_C::clear_frameid() {
  frameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateInfo_S_TO_C::_internal_frameid() const {
  return frameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateInfo_S_TO_C::frameid() const {
  // @@protoc_insertion_point(field_get:Chat.UpdateInfo_S_TO_C.frameID)
  return _internal_frameid();
}
inline void UpdateInfo_S_TO_C::_internal_set_frameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frameid_ = value;
}
inline void UpdateInfo_S_TO_C::set_frameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:Chat.UpdateInfo_S_TO_C.frameID)
}

// repeated .Chat.ControlInfo_C_TO_S controlInfos = 2;
inline int UpdateInfo_S_TO_C::_internal_controlinfos_size() const {
  return controlinfos_.size();
}
inline int UpdateInfo_S_TO_C::controlinfos_size() const {
  return _internal_controlinfos_size();
}
inline void UpdateInfo_S_TO_C::clear_controlinfos() {
  controlinfos_.Clear();
}
inline ::Chat::ControlInfo_C_TO_S* UpdateInfo_S_TO_C::mutable_controlinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.UpdateInfo_S_TO_C.controlInfos)
  return controlinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ControlInfo_C_TO_S >*
UpdateInfo_S_TO_C::mutable_controlinfos() {
  // @@protoc_insertion_point(field_mutable_list:Chat.UpdateInfo_S_TO_C.controlInfos)
  return &controlinfos_;
}
inline const ::Chat::ControlInfo_C_TO_S& UpdateInfo_S_TO_C::_internal_controlinfos(int index) const {
  return controlinfos_.Get(index);
}
inline const ::Chat::ControlInfo_C_TO_S& UpdateInfo_S_TO_C::controlinfos(int index) const {
  // @@protoc_insertion_point(field_get:Chat.UpdateInfo_S_TO_C.controlInfos)
  return _internal_controlinfos(index);
}
inline ::Chat::ControlInfo_C_TO_S* UpdateInfo_S_TO_C::_internal_add_controlinfos() {
  return controlinfos_.Add();
}
inline ::Chat::ControlInfo_C_TO_S* UpdateInfo_S_TO_C::add_controlinfos() {
  ::Chat::ControlInfo_C_TO_S* _add = _internal_add_controlinfos();
  // @@protoc_insertion_point(field_add:Chat.UpdateInfo_S_TO_C.controlInfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ControlInfo_C_TO_S >&
UpdateInfo_S_TO_C::controlinfos() const {
  // @@protoc_insertion_point(field_list:Chat.UpdateInfo_S_TO_C.controlInfos)
  return controlinfos_;
}

// -------------------------------------------------------------------

// SetNickName_C_TO_S

// string nickname = 1;
inline void SetNickName_C_TO_S::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& SetNickName_C_TO_S::nickname() const {
  // @@protoc_insertion_point(field_get:Chat.SetNickName_C_TO_S.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetNickName_C_TO_S::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Chat.SetNickName_C_TO_S.nickname)
}
inline std::string* SetNickName_C_TO_S::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:Chat.SetNickName_C_TO_S.nickname)
  return _s;
}
inline const std::string& SetNickName_C_TO_S::_internal_nickname() const {
  return nickname_.Get();
}
inline void SetNickName_C_TO_S::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetNickName_C_TO_S::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetNickName_C_TO_S::release_nickname() {
  // @@protoc_insertion_point(field_release:Chat.SetNickName_C_TO_S.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetNickName_C_TO_S::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Chat.SetNickName_C_TO_S.nickname)
}

// -------------------------------------------------------------------

// Welcome_S_TO_C

// int32 playerID = 1;
inline void Welcome_S_TO_C::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Welcome_S_TO_C::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Welcome_S_TO_C::playerid() const {
  // @@protoc_insertion_point(field_get:Chat.Welcome_S_TO_C.playerID)
  return _internal_playerid();
}
inline void Welcome_S_TO_C::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void Welcome_S_TO_C::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Chat.Welcome_S_TO_C.playerID)
}

// int32 kcp_conv = 2;
inline void Welcome_S_TO_C::clear_kcp_conv() {
  kcp_conv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Welcome_S_TO_C::_internal_kcp_conv() const {
  return kcp_conv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Welcome_S_TO_C::kcp_conv() const {
  // @@protoc_insertion_point(field_get:Chat.Welcome_S_TO_C.kcp_conv)
  return _internal_kcp_conv();
}
inline void Welcome_S_TO_C::_internal_set_kcp_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kcp_conv_ = value;
}
inline void Welcome_S_TO_C::set_kcp_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kcp_conv(value);
  // @@protoc_insertion_point(field_set:Chat.Welcome_S_TO_C.kcp_conv)
}

// string udp_address = 3;
inline void Welcome_S_TO_C::clear_udp_address() {
  udp_address_.ClearToEmpty();
}
inline const std::string& Welcome_S_TO_C::udp_address() const {
  // @@protoc_insertion_point(field_get:Chat.Welcome_S_TO_C.udp_address)
  return _internal_udp_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Welcome_S_TO_C::set_udp_address(ArgT0&& arg0, ArgT... args) {
 
 udp_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Chat.Welcome_S_TO_C.udp_address)
}
inline std::string* Welcome_S_TO_C::mutable_udp_address() {
  std::string* _s = _internal_mutable_udp_address();
  // @@protoc_insertion_point(field_mutable:Chat.Welcome_S_TO_C.udp_address)
  return _s;
}
inline const std::string& Welcome_S_TO_C::_internal_udp_address() const {
  return udp_address_.Get();
}
inline void Welcome_S_TO_C::_internal_set_udp_address(const std::string& value) {
  
  udp_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Welcome_S_TO_C::_internal_mutable_udp_address() {
  
  return udp_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Welcome_S_TO_C::release_udp_address() {
  // @@protoc_insertion_point(field_release:Chat.Welcome_S_TO_C.udp_address)
  return udp_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Welcome_S_TO_C::set_allocated_udp_address(std::string* udp_address) {
  if (udp_address != nullptr) {
    
  } else {
    
  }
  udp_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udp_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Chat.Welcome_S_TO_C.udp_address)
}

// int32 udp_port = 4;
inline void Welcome_S_TO_C::clear_udp_port() {
  udp_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Welcome_S_TO_C::_internal_udp_port() const {
  return udp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Welcome_S_TO_C::udp_port() const {
  // @@protoc_insertion_point(field_get:Chat.Welcome_S_TO_C.udp_port)
  return _internal_udp_port();
}
inline void Welcome_S_TO_C::_internal_set_udp_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  udp_port_ = value;
}
inline void Welcome_S_TO_C::set_udp_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udp_port(value);
  // @@protoc_insertion_point(field_set:Chat.Welcome_S_TO_C.udp_port)
}

// -------------------------------------------------------------------

// UpdateRoomInfo_S_TO_C

// int32 playerCount = 1;
inline void UpdateRoomInfo_S_TO_C::clear_playercount() {
  playercount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRoomInfo_S_TO_C::_internal_playercount() const {
  return playercount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRoomInfo_S_TO_C::playercount() const {
  // @@protoc_insertion_point(field_get:Chat.UpdateRoomInfo_S_TO_C.playerCount)
  return _internal_playercount();
}
inline void UpdateRoomInfo_S_TO_C::_internal_set_playercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playercount_ = value;
}
inline void UpdateRoomInfo_S_TO_C::set_playercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playercount(value);
  // @@protoc_insertion_point(field_set:Chat.UpdateRoomInfo_S_TO_C.playerCount)
}

// -------------------------------------------------------------------

// PlayerInfo

// int32 playerID = 1;
inline void PlayerInfo::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:Chat.PlayerInfo.playerID)
  return _internal_playerid();
}
inline void PlayerInfo::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void PlayerInfo::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Chat.PlayerInfo.playerID)
}

// string nickname = 2;
inline void PlayerInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& PlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:Chat.PlayerInfo.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Chat.PlayerInfo.nickname)
}
inline std::string* PlayerInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:Chat.PlayerInfo.nickname)
  return _s;
}
inline const std::string& PlayerInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void PlayerInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:Chat.PlayerInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Chat.PlayerInfo.nickname)
}

// -------------------------------------------------------------------

// NotifyStartGame

// repeated .Chat.PlayerInfo playerInfos = 1;
inline int NotifyStartGame::_internal_playerinfos_size() const {
  return playerinfos_.size();
}
inline int NotifyStartGame::playerinfos_size() const {
  return _internal_playerinfos_size();
}
inline void NotifyStartGame::clear_playerinfos() {
  playerinfos_.Clear();
}
inline ::Chat::PlayerInfo* NotifyStartGame::mutable_playerinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.NotifyStartGame.playerInfos)
  return playerinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::PlayerInfo >*
NotifyStartGame::mutable_playerinfos() {
  // @@protoc_insertion_point(field_mutable_list:Chat.NotifyStartGame.playerInfos)
  return &playerinfos_;
}
inline const ::Chat::PlayerInfo& NotifyStartGame::_internal_playerinfos(int index) const {
  return playerinfos_.Get(index);
}
inline const ::Chat::PlayerInfo& NotifyStartGame::playerinfos(int index) const {
  // @@protoc_insertion_point(field_get:Chat.NotifyStartGame.playerInfos)
  return _internal_playerinfos(index);
}
inline ::Chat::PlayerInfo* NotifyStartGame::_internal_add_playerinfos() {
  return playerinfos_.Add();
}
inline ::Chat::PlayerInfo* NotifyStartGame::add_playerinfos() {
  ::Chat::PlayerInfo* _add = _internal_add_playerinfos();
  // @@protoc_insertion_point(field_add:Chat.NotifyStartGame.playerInfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::PlayerInfo >&
NotifyStartGame::playerinfos() const {
  // @@protoc_insertion_point(field_list:Chat.NotifyStartGame.playerInfos)
  return playerinfos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Chat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Chat::TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Chat::TYPE>() {
  return ::Chat::TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
